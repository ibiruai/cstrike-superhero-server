// GRANDMASTER V2

/* CVARS - copy and paste to shconfig.cfg

//Grandmaster V2
gmasterv2_level 8
gmasterv2_respawntime 4     //delay before a player will be revived
gmasterv2_messagetype 2     //1 - chat message, 2 - hudmessage, 3 - chat message only to revived
gmasterv2_sameteam 0	    //0 - revives everyone, 1 - only teammates, 2 - no player with Grandmaster required
gmasterv2_limit -1          //-1 - no limit, >=0 - this much time a player can be revived
*/

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Grandmaster"
new bool:gHasGrandmaster[SH_MAXSLOTS+1]
new const gSoundGmaster[] = "ambience/port_suckin1.wav"
new gPcvarRespawnTime, gPcvarMessageType, gPcvarSameTeam, gPcvarLimit
new Float:gDeathTime[SH_MAXSLOTS+1]
new gRespawnedTimes[SH_MAXSLOTS+1]
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Grandmaster V2", "1.1", "evileye ({HOJ} Batman/JTP10181)")
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("gmasterv2_level", "8")
	gPcvarRespawnTime = register_cvar("gmasterv2_respawntime", "4")
	gPcvarMessageType = register_cvar("gmasterv2_messagetype", "2")
	gPcvarSameTeam = register_cvar("gmasterv2_sameteam", "0")
	gPcvarLimit = register_cvar("gmasterv2_limit", "-1")
	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Revive Dead", "Utilize cosmic life force to revive dead players")
	register_event("DeathMsg", "ev_DeathMsg", "a")
	register_event("HLTV", "event_new_round", "a", "1=0", "2=0")  
	set_task(10.0, "gmaster_loop", _, _, _, "b")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_sound(gSoundGmaster)
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return
	gHasGrandmaster[id] = mode ? true : false
	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public ev_DeathMsg()
{
	new dead = read_data(2)
	gDeathTime[dead] = get_gametime()
	set_task(get_pcvar_float(gPcvarRespawnTime), "gmaster_respawn", dead)
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gRespawnedTimes[id] = 0
}
//----------------------------------------------------------------------------------------------
public event_new_round()
{
	for ( new id = 1; id <= SH_MAXSLOTS; id++ )
		gRespawnedTimes[id] = 0
}
//----------------------------------------------------------------------------------------------
public gmaster_respawn(dead)
{
	if ( !sh_is_active() || !sh_is_inround() ||
	     !is_user_connected(dead) || is_user_alive(dead) ||
		 cs_get_user_team(dead) == CS_TEAM_SPECTATOR || cs_get_user_team(dead) == CS_TEAM_UNASSIGNED ||
		 0 <= get_pcvar_num(gPcvarLimit) <= gRespawnedTimes[dead] ||
         get_gametime() - gDeathTime[dead] - get_pcvar_float(gPcvarRespawnTime) > 1 )
		return

	if ( get_pcvar_num(gPcvarSameTeam) == 2 ) {
		gRespawnedTimes[dead]++
		ExecuteHamB(Ham_CS_RoundRespawn, dead)
		emit_sound(dead, CHAN_STATIC, gSoundGmaster, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		sh_set_godmode(dead, 1.75)
		return
	}

	new players[SH_MAXSLOTS], playerCount, gmaster
	get_players(players, playerCount, "a")
	// Look for alive players with unused Grandmaster Powers
	for ( new i = 0; i < playerCount; i++ ) {
		if ( gHasGrandmaster[players[i]] ) {
			gmaster = players[i]
			if (get_pcvar_num(gPcvarSameTeam) != 0 && cs_get_user_team(dead) != cs_get_user_team(gmaster))
				continue
			// We got a Grandmaster willing to raise the dead!
			emit_sound(gmaster, CHAN_STATIC, gSoundGmaster, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			new gmasterName[32], deadName[32]
			get_user_name(gmaster, gmasterName, charsmax(gmasterName))
			get_user_name(dead, deadName, charsmax(deadName))
			new message_type = get_pcvar_num(gPcvarMessageType)
			if (message_type == 1)
				for ( new i = 1; i <= SH_MAXSLOTS; i++ ) {
					if ( is_user_connected(i) ) {
						sh_chat_message(i, gHeroID, "%L", i, "GRANDMASTER_POWER_USED", gmasterName, deadName)
					}
				}
			else if (message_type == 2)
				for ( new i = 1; i <= SH_MAXSLOTS; i++ ) {
					if ( is_user_connected(i) ) {
						set_hudmessage(65, 65, 5, 0.01, 0.71, 2, 0.02, 3.0, 0.01, 0.1, 3)
						show_hudmessage(i, "%L", i, "GRANDMASTER_POWER_USED", gmasterName, deadName)
					}
				}
			else
				sh_chat_message(dead, gHeroID, "%L", dead, "GRANDMASTER_POWER_USED_ON_YOU", gmasterName)
			gRespawnedTimes[dead]++
			//Respawns the player best available method
			ExecuteHamB(Ham_CS_RoundRespawn, dead)
			emit_sound(dead, CHAN_STATIC, gSoundGmaster, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			sh_set_godmode(dead, 1.75)
			break
		}
	}
}
//----------------------------------------------------------------------------------------------
public gmaster_loop()
{
	static players[SH_MAXSLOTS], playerCount, dead, i
	get_players(players, playerCount, "bh")
	for ( i = 0; i < playerCount; i++ ) {
		dead = players[i]
		gDeathTime[dead] = get_gametime()
		set_task(get_pcvar_float(gPcvarRespawnTime), "gmaster_respawn", dead)
	}
}
