// Bomberman V2
// Based on Bomberman (author - AssKicR) and Fake C4 (author - Alka)

/* CVARS - copy and paste to shconfig.cfg

//Bomberman
bombermanv2_level 0
bombermanv2_timer 35

*/

#include <superheromod>
#include <fakemeta>
#include <hamsandwich>
#include <fakemeta_util>

#define fm_create_entity(%1) engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, %1))
#define IsPlayer(%1)    (1<=%1<=SH_MAXSLOTS)

#define C4_PLANT_TIME 3 //engine based.Don't modify.

new const g_szC4Sounds[][] = {
	
	"weapons/c4_beep1.wav",
	"weapons/c4_beep2.wav",
	"weapons/c4_beep3.wav",
	"weapons/c4_beep4.wav",
	"weapons/c4_beep5.wav"
}

new gHeroID
new const gHeroName[] = "Bomberman"
new bool:gHasBomberman[SH_MAXSLOTS+1]
new gBombEntity[SH_MAXSLOTS+1]
new bool:gBombActivated[SH_MAXSLOTS+1]
new const gSoundBombPlant[] = "weapons/c4_plant.wav"
new const gBombModel[] = "models/w_c4.mdl"
new gPcvarLevel, gPcvarTimer
new gSpriteExplode
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Bomberman V2", SH_VERSION_STR, "Evileye (AssKicR, Alka")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	gPcvarLevel = register_cvar("bombermanv2_level", "0")
	gPcvarTimer = register_cvar("bombermanv2_timer", "35")

	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, gPcvarLevel)
	sh_set_hero_info(gHeroID, "Toy Bombs", "Press +power button to plant a toy bomb")
	sh_set_hero_bind(gHeroID)
	
	// NEW ROUND
	register_event("HLTV", "event_new_round", "a", "1=0", "2=0")
	
	RegisterHam(Ham_Think, "func_button", "fwd_HamThink", 1)
	RegisterHam( Ham_Use , "func_button" , "HamUse_Button" );
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_model(gBombModel)
	precache_sound(gSoundBombPlant)	
	gSpriteExplode = precache_model("sprites/eexplo.spr")
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return

	switch(mode) {
		case SH_HERO_ADD: {
			gHasBomberman[id] = true
		}
		case SH_HERO_DROP: {
			gHasBomberman[id] = false
			remove_bomb(id)
		}
	}

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public event_new_round()
{
	new players[32], num, id
	get_players(players, num, "ch")

	for (new i = 0; i < num; i++)
	{
		id = players[i]
		
		if (gHasBomberman[id])
			remove_bomb(id)
	}
}
//----------------------------------------------------------------------------------------------
remove_bomb(id)
{
	new bombent = gBombEntity[id]

	if ( pev_valid(bombent) ) {
		engfunc(EngFunc_RemoveEntity, bombent)
	}

	gBombEntity[id] = 0
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public sh_hero_key(id, heroID, key)
{
	if ( gHeroID != heroID || sh_is_freezetime() ) return
	if ( !is_user_alive(id) || !gHasBomberman[id] ) return

	if ( key == SH_KEYDOWN ) {
		plant_bomb(id)
	}
}
//----------------------------------------------------------------------------------------------
plant_bomb(id)
{
	if ( gBombEntity[id] > 0 ) {
		sh_sound_deny(id)
		return
	}

	new bombent
	gBombEntity[id] = bombent = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "func_button"))

	if ( !pev_valid(bombent) ) {
		gBombEntity[id] = 0
		return
	}

	set_pev(bombent, pev_classname, "c4_bomb")
	engfunc(EngFunc_SetModel, bombent, gBombModel)

	new Float:PlayerOrigin[3]
	pev(id, pev_origin, PlayerOrigin)

	engfunc(EngFunc_SetSize, bombent, Float:{-4.0, -4.0, 2.0}, Float:{4.0, 4.0, 10.0})
	engfunc(EngFunc_SetOrigin, bombent, PlayerOrigin)
	set_pev(bombent, pev_solid, SOLID_BBOX)
	set_pev(bombent, pev_movetype, MOVETYPE_TOSS)
	set_pev(bombent, pev_owner, id)
	
	set_pev(bombent, pev_fuser1, get_pcvar_float(gPcvarTimer));
	set_pev(bombent, pev_nextthink, get_gametime())
	
	gBombActivated[id] = true

	emit_sound(bombent, CHAN_WEAPON, gSoundBombPlant, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	remove_bomb(id)
	gHasBomberman[id] = false
}
//----------------------------------------------------------------------------------------------
public client_disconnected(id)
{
	remove_bomb(id)
	gHasBomberman[id] = false
}
//----------------------------------------------------------------------------------------------
public fwd_HamThink(ent)
{
	if(!pev_valid(ent))
		return HAM_IGNORED;
	
	static szClassname[32];
	pev(ent, pev_classname, szClassname, sizeof szClassname - 1);
	
	if(szClassname[0] == 'c' && szClassname[1] == '4' && szClassname[3] == 's')
	{
		switch(pev(ent, pev_iuser1))
		{
			case 3: { set_pev(ent, pev_renderamt, 100.0); }
			case 2: { set_pev(ent, pev_renderamt, 50.0); }
			case 1: { set_pev(ent, pev_renderamt, 10.0); }
			case 0:
			{
				engfunc(EngFunc_RemoveEntity, ent);
				return HAM_IGNORED;
			}
		}
		set_pev(ent, pev_iuser1, pev(ent, pev_iuser1) - 1);
		set_pev(ent, pev_nextthink, get_gametime() + 0.1);
	}
	else if(szClassname[0] == 'c' && szClassname[1] == '4' && szClassname[3] == 'b')
	{
		static Float:vOrigin[3];
		pev(ent, pev_origin, vOrigin);
		
		vOrigin[2] += 7.0;
		
		new iSprite = fm_create_entity("func_button");
		set_pev(iSprite, pev_classname, "c4_sprite");
		engfunc(EngFunc_SetOrigin, iSprite, vOrigin);
		set_pev(iSprite, pev_rendermode, 5);
		set_pev(iSprite, pev_renderamt, 200.0);
		set_pev(iSprite, pev_scale, 0.3);
		engfunc(EngFunc_SetModel, iSprite, "sprites/ledglow.spr");
		set_pev(iSprite, pev_iuser1, 3);
		set_pev(iSprite, pev_nextthink, get_gametime() + 0.1);
		
		new Float:fTime;
		pev(ent, pev_fuser1, fTime);
		new Float:fExplodeTime = get_pcvar_float(gPcvarTimer);
		
		if(!fTime || fTime < 0.0)
		{
			new owner_id = pev(ent, pev_owner)
			
			if (gBombActivated[owner_id])
			{
				client_print(owner_id, print_center, "%L", owner_id, "BOMBERMAN_EXPLOSION");
				gBombActivated[owner_id] = false;
				explode_bomb(owner_id);
			}
			
			return HAM_IGNORED;
		}
		
		if(0 <= fTime <= fExplodeTime / 5)
			emit_sound(ent, CHAN_AUTO, g_szC4Sounds[4], VOL_NORM, ATTN_STATIC, 0, PITCH_NORM);
		else if(fExplodeTime / 5 < fTime <= fExplodeTime / 4)
			emit_sound(ent, CHAN_AUTO, g_szC4Sounds[3], VOL_NORM, ATTN_STATIC, 0, PITCH_NORM);
		else if(fExplodeTime / 4 < fTime <= fExplodeTime / 3)
			emit_sound(ent, CHAN_AUTO, g_szC4Sounds[2], VOL_NORM, ATTN_STATIC, 0, PITCH_NORM);
		else if(fExplodeTime / 3 < fTime <= fExplodeTime / 2)
			emit_sound(ent, CHAN_AUTO, g_szC4Sounds[1], VOL_NORM, ATTN_STATIC, 0, PITCH_NORM);
		else if(fExplodeTime / 2 < fTime <= fExplodeTime)
			emit_sound(ent, CHAN_AUTO, g_szC4Sounds[0], VOL_NORM, ATTN_STATIC, 0, PITCH_NORM);
		
		set_pev(ent, pev_fuser1, fTime - 1.5);
		set_pev(ent, pev_nextthink, get_gametime() + 1.5);
	}
	return HAM_IGNORED;
}
//----------------------------------------------------------------------------------------------
// Thanks to Bugsy
// https://forums.alliedmods.net/showpost.php?p=2355731&postcount=11
public HamUse_Button( iEntity , iPlayer , iActivator , iUseType , Float:fValue )
{
	new szName[32], owner_name[32], entclass[10];
    
	pev(iEntity, pev_classname, entclass, sizeof entclass - 1)
	
	if ( equal(entclass, "c4_bomb") && iUseType == 2 && fValue == 1.0 && IsPlayer( iPlayer ) )
	{
		new owner_id = pev(iEntity, pev_owner)
		get_user_name( owner_id , owner_name , charsmax( owner_name ) );
		get_user_name( iPlayer , szName , charsmax( szName ) );
		
		if (gBombActivated[owner_id])
		{
			set_pev(iEntity, pev_fuser1, -1);
			gBombActivated[owner_id] = false;
			if (owner_id == iPlayer)
				client_print(owner_id, print_center, "%L", owner_id, "BOMBERMAN_YOU_DISACTIVATE_YOURS");
			else 
			{
				client_print(iPlayer, print_center, "%L", iPlayer, "BOMBERMAN_YOU_DISACTIVATE", owner_name);
				client_print(owner_id, print_center, "%L", owner_id, "BOMBERMAN_DISACTIVATED", szName);
			}
		}
		else
		{
			set_pev(iEntity, pev_fuser1, get_pcvar_float(gPcvarTimer));
			set_pev(iEntity, pev_nextthink, get_gametime());
			gBombActivated[owner_id] = true;
			if (owner_id == iPlayer)
				client_print(owner_id, print_center, "%L", owner_id, "BOMBERMAN_YOU_ACTIVATE_YOURS");
			else 
			{
				client_print(iPlayer, print_center, "%L", iPlayer, "BOMBERMAN_YOU_ACTIVATE", owner_name);
				client_print(owner_id, print_center, "%L", owner_id, "BOMBERMAN_ACTIVATED", szName);
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
explode_bomb(id)
{
	new bombent = gBombEntity[id]

	if ( pev_valid(bombent) ) {
		client_print(id, print_chat, "%L", id, "BOMBERMAN_ACTIVATED", id);

		new Float:origin[3]
		pev(bombent, pev_origin, origin)

		//explode(origin)

		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(TE_EXPLOSION)
		write_coord(floatround(origin[0])); 
		write_coord(floatround(origin[1]));      
		write_coord(floatround(origin[2]));
		write_short(gSpriteExplode)
		write_byte(50)
		write_byte(15)
		write_byte(0)
		message_end()
	}
}
//----------------------------------------------------------------------------------------------