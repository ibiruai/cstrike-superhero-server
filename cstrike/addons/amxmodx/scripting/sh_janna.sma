// Janna - Healing Smoke Grenades

/* CVARS - copy and paste to shconfig.cfg

//Janna
janna_level 4
janna_grenadetimer 20		//How many second delay for new grenade
janna_healpoints 30		    //Amount of health given by grenade per second
janna_healtime 5.0		    //Amount of time health given

*/

// I was using parts of code of Diablo mod (N1ghtmr1, Miczu, GuTeK, Onyke, Feanaro, hitmany),
// Hobgoblin ({HOJ} Batman, JTP10181), and Gambit (Vectren, vittu)
// --evileye <https://ibiruai.github.io>

#include <amxmodx>
#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[]= "Janna"
new bool:gHasJanna[SH_MAXSLOTS+1]
new bool:gBlockGiveTask[SH_MAXSLOTS+1]
new gPcvarGrenadeTimer, gPcvarHealPoints
new gPcvarHealTime
new gGrenTrail
new const SMOKEGRENADE_MODEL[] = "models/w_smokegrenade.mdl"
new classname[] = "Healing_Grenade"
new sprite_white

#define AMMOX_SMOKEGRENADE 13
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Janna", "1.0", "Evileye")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new gLevel = register_cvar("janna_level", "4")
	gPcvarGrenadeTimer = register_cvar("janna_grenadetimer", "20")
	gPcvarHealPoints = register_cvar("janna_healpoints", "30")
	gPcvarHealTime = register_cvar("janna_healtime", "5.0")

	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, gLevel)
	sh_set_hero_info(gHeroID, "Healing Grenades", "Heal your team with healing grenades")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO!
	register_event("AmmoX", "on_ammox", "b")
	register_event("HLTV", "event_round_start", "a", "1=0", "2=0")	
	register_think(classname, "Healing_Grenade_Think")
	register_forward(FM_SetModel, "fw_SetModel");
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	gGrenTrail = precache_model("sprites/zbeam5.spr")
	sprite_white = precache_model("sprites/white.spr") 
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return

	switch(mode) {
		case SH_HERO_ADD: {
			gHasJanna[id] = true
			give_grenade(id)
		}
		case SH_HERO_DROP: {
			gHasJanna[id] = false
		}
	}

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if ( gHasJanna[id] ) {
		//Block Ammox nade give task on spawn, since you are given a nade on spawn.
		//This must not be delayed, it must catch before inital ammox called.
		gBlockGiveTask[id] = true

		give_grenade(id)
	}
}
//----------------------------------------------------------------------------------------------
public give_grenade(id)
{
	if ( sh_is_active() && is_user_alive(id) && gHasJanna[id] ) {
		sh_give_weapon(id, CSW_SMOKEGRENADE)
	}
}
//----------------------------------------------------------------------------------------------
public on_ammox(id)
{
	//Ammox is used in case other heroes give nades so the task can be removed when nade is refilled.
	if ( !sh_is_active() || !is_user_alive(id) || !gHasJanna[id] ) return

	//new iAmmoType = read_data(1)
	if ( read_data(1) == AMMOX_SMOKEGRENADE ) {
		new iAmmoCount = read_data(2)

		if ( iAmmoCount == 0 && !gBlockGiveTask[id] ) {
			//This will be called on spawn as well as when nade is thrown, block this on spawn.
			//Nade was thrown set task to give another.
			set_task(get_pcvar_float(gPcvarGrenadeTimer), "give_grenade", id)
		}
		else if ( iAmmoCount > 0 ) {
			gBlockGiveTask[id] = false
			remove_task(id)
		}
		
		// From SuperHero Gambit
		// https://forums.alliedmods.net/showthread.php?t=30213
		// Have to Find the current HE grenade
		new iCurrent = -1
		while ( ( iCurrent = find_ent(iCurrent, "grenade") ) > 0 ) {
			new string[32]
			entity_get_string(iCurrent, EV_SZ_model, string, 31)

			if ( id == entity_get_edict(iCurrent, EV_ENT_owner) && equali(SMOKEGRENADE_MODEL, string)) {

				// new Float:glowColor[3] = {20.0, 255.0, 20.0}

				// Make the nade glow
				// entity_set_int(iCurrent, EV_INT_renderfx, kRenderFxGlowShell)
				// entity_set_vector(iCurrent, EV_VEC_rendercolor, glowColor)

				// Make the nade a bit invisible to make glow look better
				// entity_set_int(iCurrent, EV_INT_rendermode, kRenderTransAlpha)
				// entity_set_float(iCurrent, EV_FL_renderamt, 100.0 )

				// Make a trail
				message_begin(MSG_BROADCAST , SVC_TEMPENTITY)
				write_byte(22)			//TE_BEAMFOLLOW
				write_short(iCurrent)	// entity:attachment to follow
				write_short(gGrenTrail)	// sprite index
				write_byte(10)		// life in 0.1's
				write_byte(10)		// line width in 0.1's
				write_byte(100)	// colour
				write_byte(255)
				write_byte(100)
				write_byte(255)	// brightness
				message_end()
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gHasJanna[id] = false
}
//----------------------------------------------------------------------------------------------
public event_round_start()
{
	new iEnt = find_ent_by_class(-1, classname)
	while(iEnt > 0) {
		remove_entity(iEnt)
		iEnt = find_ent_by_class(iEnt, classname)		
	}
}
//----------------------------------------------------------------------------------------------
// https://forums.alliedmods.net/showpost.php?p=591365&postcount=2
public fw_SetModel(ent, model[]) {
	if (!sh_is_active())
		return FMRES_IGNORED;
	if (!pev_valid(ent))
		return FMRES_IGNORED;
	
	if (equali(model, SMOKEGRENADE_MODEL)) {// smoke grenade
		new id = pev(ent, pev_owner)
		if (!gHasJanna[id] || !is_user_connected(id)) // not yet thrown
			return FMRES_IGNORED;
			
		set_pev(ent, pev_nextthink, 99999.0); // prevent it from exploding
		
		// then do whatever you want with it
		
		new old_origin[3]
		pev(ent, pev_origin, old_origin)
		set_task(0.5, "check_origin", ent, old_origin)
	}
	
	return FMRES_IGNORED;
}
//----------------------------------------------------------------------------------------------
public check_origin(ent, old_origin[3])
{
	if (!is_valid_ent(ent))
		return
	new id = pev(ent, pev_owner)
	
	new origin[3]
	pev(ent, pev_origin, origin)
	if (old_origin[0] != origin[0] || old_origin[1] != origin[1] || old_origin[2] != origin[2])
	{
		old_origin = origin
		set_task(0.5, "check_origin", ent, old_origin)
	}
	else
	{
		engfunc(EngFunc_RemoveEntity, ent)
		healing_grenade(id, origin)
	}	
}
//----------------------------------------------------------------------------------------------
public healing_grenade(id, origin[])
{
	new ent = Spawn_Ent("info_target")
	set_pev(ent, pev_classname, classname)
	set_pev(ent, pev_owner, id)
	set_pev(ent, pev_solid, SOLID_TRIGGER)
	set_pev(ent, pev_origin, origin)
	set_pev(ent, pev_ltime, halflife_time() + get_pcvar_float(gPcvarHealTime) + 0.1)
	
	engfunc(EngFunc_SetModel, ent, SMOKEGRENADE_MODEL)  	
	
	set_pev(ent, pev_nextthink, halflife_time() + 0.1)
	
	return PLUGIN_CONTINUE	
}
//----------------------------------------------------------------------------------------------
public Healing_Grenade_Think(ent)
{
	new id = pev(ent, pev_owner)
	new grenade_dist = 200
	
	//We have emitted beam. Apply effect (this is delayed)
	if (pev(ent, pev_euser2) == 1)
	{		
		new Float:forigin[3], origin[3]
		pev(ent, pev_origin, forigin)	
		FVecIVec(forigin, origin)
		
		//Find people near and damage them
		new entlist[513]
		new numfound = find_sphere_class(0, "player", grenade_dist + 0.0, entlist, 512, forigin)
		
		for (new i=0; i < numfound; i++)
		{		
			new pid = entlist[i]
			
			if (get_user_team(pid) != get_user_team(id))
				continue
								
			if (is_user_alive(pid))
			{
				new currentHealth = get_user_health(pid)
				sh_add_hp(pid, get_pcvar_num(gPcvarHealPoints))
				if (get_user_health(pid) - currentHealth > 0)
				{
					janna_glow(pid)
					set_task(0.7, "janna_unglow", pid)
					sh_screen_fade(pid, 0.25, 0.125, 10, 255, 10, 70)	// Green Screen Flash
				}
			}
		}
		
		set_pev(ent, pev_euser2, 0)
		set_pev(ent, pev_nextthink, halflife_time() + 1.5)
		
		return PLUGIN_CONTINUE
	}
	
	//Entity should be destroyed because livetime is over
	if (pev(ent, pev_ltime) < halflife_time() || !is_user_connected(id))
	{
		remove_entity(ent)
		return PLUGIN_CONTINUE
	}
	
	//If this object is almost dead, apply some render to make it fade out
	if (pev(ent, pev_ltime)-2.0 < halflife_time())
		set_rendering ( ent, kRenderFxNone, 255, 255, 255, kRenderTransTexture, 100 ) 
		
	new Float:forigin[3], origin[3]
	pev(ent, pev_origin, forigin)	
	FVecIVec(forigin, origin)
					
	//Find people near and give them health
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY, origin );
	write_byte( TE_BEAMCYLINDER );
	write_coord( origin[0] );
	write_coord( origin[1] );
	write_coord( origin[2] );
	write_coord( origin[0] );
	write_coord( origin[1] + grenade_dist );
	write_coord( origin[2] + grenade_dist );
	write_short( sprite_white );
	write_byte( 0 ); // startframe
	write_byte( 0 ); // framerate
	write_byte( 10 ); // life
	write_byte( 10 ); // width
	write_byte( 255 ); // noise
	write_byte( 100 ); // r, g, b
	write_byte( 255 ); // r, g, b
	write_byte( 100 ); // r, g, b
	write_byte( 255 ); // brightness
	write_byte( 5 ); // speed
	message_end();
		
	set_pev(ent, pev_euser2, 1)
	set_pev(ent, pev_nextthink, halflife_time() + 0.5)
	
	
	return PLUGIN_CONTINUE

}
//----------------------------------------------------------------------------------------------
stock Spawn_Ent(const classname[]) 
{
	new ent = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, classname))
	set_pev(ent, pev_origin, {0.0, 0.0, 0.0})
	dllfunc(DLLFunc_Spawn, ent)
	return ent
}
//----------------------------------------------------------------------------------------------
public janna_glow(id)
{
	new Float:takeDamage
	pev(id, pev_takedamage, takeDamage)
	if ( takeDamage == DAMAGE_NO ) return
	
	sh_set_rendering( id, 0, 128, 0, 16, kRenderFxGlowShell )
}
//----------------------------------------------------------------------------------------------
public janna_unglow(task_id)
{
	new id = task_id
	new Float:takeDamage
	pev(id, pev_takedamage, takeDamage)
	if ( takeDamage == DAMAGE_NO && is_user_alive(id) ) return
	
	sh_set_rendering(id)
}
