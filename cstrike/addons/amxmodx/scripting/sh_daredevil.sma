// DAREDEVIL! - Yeah - well not all of his powers or it'd be unfair...
// 5/17/2003 Took out light up whole map code - too slow on most computers!

/* CVARS - copy and paste to shconfig.cfg

//Daredevil
daredevil_level 0
daredevil_radius 600		//Radius of the rings
daredevil_bright 192		//How bright to make the rings

*/

// 25 dec 2018 - Evileye - Spectators see the rings too if they are spectating a player who has Daredevil. You can change this with SPECTATORS_SEE_RINGS 0/1. More people will find out about this useful hero now.

//---------- User Changeable Defines --------//


// 1 = show spectators the rings, 0 = don't show
#define SPECTATORS_SEE_RINGS 1

#define AIMBOTDETECT 1


//------- Do not edit below this point ------//

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Daredevil"
new bool:gHasDaredevil[SH_MAXSLOTS+1]
new gSpriteWhite
new gPcvarRadius, gPcvarBright
#if AIMBOTDETECT
new AimbotDetectForward
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Daredevil", SH_VERSION_STR, "{HOJ} Batman/JTP10181")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("daredevil_level", "0")
	gPcvarRadius = register_cvar("daredevil_radius", "600")
	gPcvarBright = register_cvar("daredevil_bright", "192")

	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Radar Sense", "ESP Rings show you when other players are approaching")

	// ESP Rings Task
	set_task(2.0, "daredevil_esploop", _, _, _, "b")
	
	#if AIMBOTDETECT
	AimbotDetectForward = CreateMultiForward("aimbotdetect_bot_check", ET_CONTINUE, FP_CELL)
	#endif
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	gSpriteWhite = precache_model("sprites/white.spr")
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return

	gHasDaredevil[id] = mode ? true : false

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public daredevil_esploop()
{
	if ( !sh_is_active() ) return

	static players[SH_MAXSLOTS], playerCount, player
	static idRing, ringOrigin[3], i, j

	static radius, brightness
	radius = get_pcvar_num(gPcvarRadius)
	brightness = get_pcvar_num(gPcvarBright)

	get_players(players, playerCount, "ah")

#if SPECTATORS_SEE_RINGS
	static allPlayers[SH_MAXSLOTS], allPlayerCount, specPlayer
	get_players(allPlayers, allPlayerCount, "h") // Flag "a" means alive. Spectators and dead players are not alive
	
	for ( i = 0; i < allPlayerCount; i++ ) {
		player = allPlayers[i]
		
		// Who is the id specing
		specPlayer = pev(player, pev_iuser2)

		if ( ( is_user_alive(player) && !gHasDaredevil[player]) || 		// Alive player without Daredevil
			( !is_user_alive(player) && !gHasDaredevil[specPlayer] ) || // Dead player is spectating a player without Daredevil
			( !is_user_alive(player) && !is_user_alive(specPlayer) ) ) 	// Dead player is spectating another dead player
				continue												// All of them don't see any rings
#else
	for ( i = 0; i < playerCount; i++ ) {
		player = players[i]

		if ( !gHasDaredevil[player] ) continue
#endif

		for ( j = 0; j < playerCount; j++ ) {
			idRing = players[j]
			
			#if AIMBOTDETECT
			if ( is_aimbotdetect_bot(idRing) ) continue	// for AimBot Detection plugin
			#endif

			if ( idRing == player ) continue
		
		#if SPECTATORS_SEE_RINGS
			if ( idRing == specPlayer ) continue
		#endif

			if ( !get_user_origin(idRing, ringOrigin) ) continue

			message_begin(MSG_ONE_UNRELIABLE, SVC_TEMPENTITY, ringOrigin, player)
			write_byte(TE_BEAMCYLINDER)	// 21
			write_coord(ringOrigin[0])
			write_coord(ringOrigin[1])
			write_coord(ringOrigin[2] + 16)
			write_coord(ringOrigin[0])
			write_coord(ringOrigin[1])
			write_coord(ringOrigin[2] + radius)
			write_short(gSpriteWhite)
			write_byte(0)		// startframe
			write_byte(1)		// framerate
			write_byte(6)		// life
			write_byte(8)		// width
			write_byte(1)		// noise
			write_byte(100)		// r
			write_byte(100)		// g
			write_byte(255)		// b
			write_byte(brightness)	// brightness
			write_byte(0)		// speed
			message_end()
		}
	}
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gHasDaredevil[id] = false
}
//----------------------------------------------------------------------------------------------
#if AIMBOTDETECT
public is_aimbotdetect_bot(id)
{
	new functionReturn
	ExecuteForward(AimbotDetectForward, functionReturn, id)
	return functionReturn
}
#endif
//----------------------------------------------------------------------------------------------