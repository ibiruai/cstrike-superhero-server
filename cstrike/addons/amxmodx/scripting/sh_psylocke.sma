// PSYLOCKE - from the X-men. Betsy Braddock possesses many telepathic abilities.

/* CVARS - copy and paste to shconfig.cfg

//Psylocke
psylocke_level 6
psylocke_distance 50		//You see enemies when they are within # meters
psylocke_traillength 25			//Length of trail behind players
psylocke_showteam 0			//Show trails on your team
psylocke_showenemy 1			//Show trails on enemies
psylocke_refreshtimer 5.0			//How often do the trails refresh

*/

/*
* 08 feb 2019 - Evileye
* Looks like a bad idea for me now. They are good separately.
*
* 25 dec 2018 - Evileye
* Spectators see the trail too if they are spectating a player who has Psylocke. You can change this with SPECTATORS_SEE_TRAIL 0/1. More people will find out about this useful hero now.
*
* 04 dec 2018 - Evileye
* It is Psylocke 1.3 + Xavier 1.14.4
* Psylocke was rather weak. Now she has Xavier's powers.
* Both powers are about telepathy so I think it is a fine idea.
* Also Psylocke now shows exact distance from an enemy (it was rounded to tens before).
* CVAR psylocke_distance added. Now Psylocke can see farther.
*
* Psylocke Created by StuD|MaN
* Xavier Created by {HOJ} Batman
*/

//---------- User Changeable Defines --------//


// 0 = don't give Xavier power, 1 = give Xavier power
#define XAVIER_POWER 0

// 0 = don't show spectators info, 1 = show spectators info
#define SPECTATORS_SEE_TRAIL 0


//------- Do not edit below this point ------//

#include <amxmodx>
#include <cstrike>
#include <superheromod>

new gHeroID
new const gHeroName[] = "Psylocke"
new bool:gHasPsylocke[SH_MAXSLOTS+1]
new gMsgSync
new pcvarDistance, pcvarFFA
new bool:FFA

#if XAVIER_POWER
new gSpriteLaserBeam
new gPcvarTrailLength, gPcvarShowTeam, gPcvarShowEnemy, gPcvarRefreshTimer
#endif

#if SPECTATORS_SEE_TRAIL
new lastSpectated[SH_MAXSLOTS+1]
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Psylocke", "1.3.1", "StuD|MaN")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("psylocke_level", "7")
	pcvarDistance = register_cvar("psylocke_distance", "50")
	pcvarFFA = register_cvar("sh_ffa", "0")
	
	#if XAVIER_POWER
	gPcvarTrailLength = register_cvar("psylocke_traillength", "25")
	gPcvarShowTeam = register_cvar("psylocke_showteam", "0")
	gPcvarShowEnemy = register_cvar("psylocke_showenemy", "1")
	gPcvarRefreshTimer = register_cvar("psylocke_refreshtimer", "5.0")
	#endif

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	
	#if XAVIER_POWER
		sh_set_hero_info(gHeroID, "Psychic Detection", "Recieve a telepathic warning when an enemy is near. Detect what team players are.")
	#else
		sh_set_hero_info(gHeroID, "Psychic Detection", "Recieve a telepathic warning when an enemy is near.")
	#endif

	//LOOP
	set_task(0.1, "psylocke_loop", 0, "", 0, "b")

	gMsgSync = CreateHudSyncObj()
}
//----------------------------------------------------------------------------------------------
#if XAVIER_POWER
public plugin_precache()
{
	gSpriteLaserBeam = precache_model("sprites/laserbeam.spr")
}
#endif
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return
	
	// Clear out any stale tasks
	remove_task(id)

	switch(mode) {
		case SH_HERO_ADD: {
			gHasPsylocke[id] = true
			
			#if XAVIER_POWER
			add_all_marks(id)
			set_task(get_pcvar_float(gPcvarRefreshTimer), "add_all_marks", id, _, _, "b")
			#endif
		}

		case SH_HERO_DROP: {
			gHasPsylocke[id] = false
			
			#if XAVIER_POWER
			remove_all_marks(id)
			#endif
		}
	}

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public psylocke_loop()
{
	FFA = get_pcvar_num(pcvarFFA) ? true : false
	
	if ( !sh_is_active() ) return

	static players[SH_MAXSLOTS], pnum, i, e, id, enemy, closestEnemy, maxDistance
	static Origin[3], eOrigin[3]
	static CsTeams:idTeam
	
	maxDistance = floatround( get_pcvar_num(pcvarDistance) / 0.0254, floatround_ceil )

	// need to count bots for second loop but not alive players for either
	get_players(players, pnum, "ah")

	for (i = 0; i < pnum; i++) {
		id = players[i]
		if ( is_user_bot(id) || !gHasPsylocke[id] ) continue

		idTeam = cs_get_user_team(id)
		get_user_origin(id, Origin)

		//Anyone closer than this is within 30 meters
		closestEnemy = maxDistance

		for (e = 0; e < pnum; e++) {
			enemy = players[e]
			if ( !FFA && idTeam == cs_get_user_team(enemy) || id == enemy ) continue

			get_user_origin(enemy, eOrigin)

			closestEnemy = min(closestEnemy, get_distance(eOrigin, Origin))
		}

		if ( closestEnemy == maxDistance ) continue

		// get_distance() returns inches and 1 inch = 0.0254 meters
		new meters = floatround(closestEnemy * 0.0254)
		switch(meters)
		{
			case 0..1: {
				set_hudmessage(255, 0, 0, 0.008, 0.27, 1, 6.0, 0.5, 0.1, 0.1, 4)
				ShowSyncHudMsg(id, gMsgSync, "%L", id, "PSYLOCK_DISTANCE1")
			}
			case 2..10: {
				set_hudmessage(255, 0, 0, 0.008, 0.27, 1, 6.0, 0.5, 0.1, 0.1, 4)
				ShowSyncHudMsg(id, gMsgSync, "%L", id, "PSYLOCK_DISTANCE2", meters)
			}
			case 11..20: {
				set_hudmessage(255, 155, 0, 0.008, 0.27, 1, 6.0, 0.5, 0.1, 0.1, 4)
				ShowSyncHudMsg(id, gMsgSync, "%L", id, "PSYLOCK_DISTANCE3", meters)
			} 
			default: {
				set_hudmessage(255, 255, 255, 0.008, 0.27, 1, 6.0, 0.5, 0.1, 0.1, 4)
				ShowSyncHudMsg(id, gMsgSync, "%L", id, "PSYLOCK_DISTANCE4", meters)
			}
		}
	}
	
	#if XAVIER_POWER && SPECTATORS_SEE_TRAIL
	for ( new player = 1; player <= SH_MAXSLOTS; player++ ) {
		
		if ( !is_user_connected(player) || is_user_alive(player) ) continue
		
		// Who is the id specing
		new specPlayer = pev(player, pev_iuser2)
		
		if ( specPlayer != lastSpectated[player] )
		{
			lastSpectated[player] = specPlayer
			if ( gHasPsylocke[specPlayer] )
			{
				remove_all_marks(player)
				add_all_marks(player)
			}
			else
				remove_all_marks(player)
		}
	}
	#endif
}
//----------------------------------------------------------------------------------------------
#if XAVIER_POWER
public sh_client_spawn(id)
{
	if ( gHasPsylocke[id] ) {
		add_all_marks(id)
	}
}
//----------------------------------------------------------------------------------------------
public add_all_marks(id)
{
#if SPECTATORS_SEE_TRAIL
	// Who is the id specing
	new specPlayer = pev(id, pev_iuser2)
	
	// spec = true if Dead player is spectating player with Psylocke
	new bool:spec = ( !is_user_alive(id) && gHasPsylocke[specPlayer] )
	
	if ( ( !sh_is_active() || !is_user_alive(id) || !gHasPsylocke[id] ) && !spec )
		return
#else
	if ( !sh_is_active() || !is_user_alive(id) || !gHasPsylocke[id] )
		return
#endif

	static bool:sameTeam
	static bool:showTeam
	static bool:showEnemy
	static CsTeams:idTeam
	static CsTeams:playerTeam

	showTeam =  ( get_pcvar_num(gPcvarShowTeam)  || get_pcvar_num(pcvarFFA) ) ? true : false
	showEnemy = ( get_pcvar_num(gPcvarShowEnemy) || get_pcvar_num(pcvarFFA) ) ? true : false
#if SPECTATORS_SEE_TRAIL
	if (spec)
		idTeam = cs_get_user_team(specPlayer)
	else
		idTeam = cs_get_user_team(id)
#else
	idTeam = cs_get_user_team(id)
#endif
	static players[SH_MAXSLOTS], playerCount, player, i
	get_players(players, playerCount, "ah")

	for ( i = 0; i < playerCount; i++ ) {
		player = players[i]

		if ( player == id ) continue
		
	#if SPECTATORS_SEE_TRAIL
		if ( player == specPlayer ) continue
	#endif

		playerTeam = cs_get_user_team(player)

		sameTeam = idTeam == playerTeam ? true : false

		if ( (sameTeam && showTeam) || (!sameTeam && showEnemy) ) {
			remove_mark(id, player)
			
			switch(playerTeam) {
				case CS_TEAM_T: make_trail(id, player, 255, 0, 0)
				case CS_TEAM_CT: make_trail(id, player, 0, 0, 255)
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
make_trail(id, player, iRed, iGreen, iBlue)
{
#if SPECTATORS_SEE_TRAIL
	if ( !sh_is_active() ||                       !is_user_alive(player) ) return
#else
	if ( !sh_is_active() || !is_user_alive(id) || !is_user_alive(player) ) return
#endif

	message_begin(MSG_ONE_UNRELIABLE, SVC_TEMPENTITY, _, id)
	write_byte(TE_BEAMFOLLOW)
	write_short(player)
	write_short(gSpriteLaserBeam)
	write_byte(get_pcvar_num(gPcvarTrailLength)) //length
	write_byte(8)      //width
	write_byte(iRed)   //red
	write_byte(iGreen) //green
	write_byte(iBlue)  //blue
	write_byte(150)    //bright
	message_end()
}
//----------------------------------------------------------------------------------------------
remove_all_marks(id)
{
#if SPECTATORS_SEE_TRAIL
	if ( is_user_connected(id) )  {
#else
	if ( is_user_connected(id) && gHasPsylocke[id] )  {
#endif
		new players[SH_MAXSLOTS]
		new playerCount, player
		get_players(players, playerCount, "ah")

		for ( new i = 0; i < playerCount; i++ ) {
			player = players[i]

			if ( player == id ) continue

			remove_mark(id, player)
		}
	}
}
//----------------------------------------------------------------------------------------------
remove_mark(id, player)
{
	if ( !is_user_connected(id) || !is_user_connected(player) ) return

	message_begin(MSG_ONE_UNRELIABLE, SVC_TEMPENTITY, _, id)
	write_byte(TE_KILLBEAM)
	write_short(player)
	message_end()
}
//----------------------------------------------------------------------------------------------
public sh_client_death(victim)
{
	if ( !sh_is_active() ) return

	remove_all_marks(victim)
}
//----------------------------------------------------------------------------------------------
public client_disconnected(id)
{
	remove_task(id)
	gHasPsylocke[id] = false
}
#endif
//----------------------------------------------------------------------------------------------